<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="22" passed="22" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-06-04T12:37:22 ICT" name="Surefire suite" finished-at="2024-06-04T12:37:22 ICT" duration-ms="209">
    <groups>
    </groups>
    <test started-at="2024-06-04T12:37:22 ICT" name="Surefire test" finished-at="2024-06-04T12:37:22 ICT" duration-ms="209">
      <class name="com.example.AssertTests">
        <test-method signature="testAssertNotNull()" started-at="2024-06-04T12:37:22 ICT" name="testAssertNotNull" finished-at="2024-06-04T12:37:22 ICT" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAssertNotNull -->
        <test-method signature="testAssertFalse()" started-at="2024-06-04T12:37:22 ICT" name="testAssertFalse" finished-at="2024-06-04T12:37:22 ICT" duration-ms="30" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAssertFalse -->
        <test-method signature="testAssertNotSame()" started-at="2024-06-04T12:37:22 ICT" name="testAssertNotSame" finished-at="2024-06-04T12:37:22 ICT" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAssertNotSame -->
        <test-method signature="testAssertThatEveryItemContainsString()" started-at="2024-06-04T12:37:22 ICT" name="testAssertThatEveryItemContainsString" finished-at="2024-06-04T12:37:22 ICT" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAssertThatEveryItemContainsString -->
        <test-method signature="testAssertThatHasItems()" started-at="2024-06-04T12:37:22 ICT" name="testAssertThatHasItems" finished-at="2024-06-04T12:37:22 ICT" duration-ms="19" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAssertThatHasItems -->
        <test-method signature="testAssertThatBothContainsString()" started-at="2024-06-04T12:37:22 ICT" name="testAssertThatBothContainsString" finished-at="2024-06-04T12:37:22 ICT" duration-ms="34" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAssertThatBothContainsString -->
        <test-method signature="testAssertEquals()" started-at="2024-06-04T12:37:22 ICT" name="testAssertEquals" finished-at="2024-06-04T12:37:22 ICT" duration-ms="36" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAssertEquals -->
        <test-method signature="testAssertSame()" started-at="2024-06-04T12:37:22 ICT" name="testAssertSame" finished-at="2024-06-04T12:37:22 ICT" duration-ms="53" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAssertSame -->
        <test-method signature="testAssertTrue()" started-at="2024-06-04T12:37:22 ICT" name="testAssertTrue" finished-at="2024-06-04T12:37:22 ICT" duration-ms="54" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAssertTrue -->
        <test-method signature="testAssertArrayEquals()" started-at="2024-06-04T12:37:22 ICT" name="testAssertArrayEquals" finished-at="2024-06-04T12:37:22 ICT" duration-ms="38" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAssertArrayEquals -->
        <test-method signature="testAssertThatHamcrestCoreMatchers()" started-at="2024-06-04T12:37:22 ICT" name="testAssertThatHamcrestCoreMatchers" finished-at="2024-06-04T12:37:22 ICT" duration-ms="50" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAssertThatHamcrestCoreMatchers -->
        <test-method signature="testAssertNull()" started-at="2024-06-04T12:37:22 ICT" name="testAssertNull" finished-at="2024-06-04T12:37:22 ICT" duration-ms="52" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAssertNull -->
      </class> <!-- com.example.AssertTests -->
      <class name="com.example.TestDemo">
        <test-method signature="testIsPrimeNumber1()" started-at="2024-06-04T12:37:22 ICT" name="testIsPrimeNumber1" finished-at="2024-06-04T12:37:22 ICT" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimeNumber1 -->
        <test-method signature="testIsPrimeNumber2()" started-at="2024-06-04T12:37:22 ICT" name="testIsPrimeNumber2" finished-at="2024-06-04T12:37:22 ICT" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimeNumber2 -->
        <test-method signature="testIsPrimeNumber6()" started-at="2024-06-04T12:37:22 ICT" name="testIsPrimeNumber6" finished-at="2024-06-04T12:37:22 ICT" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimeNumber6 -->
        <test-method signature="testIsPrimeNumber3()" started-at="2024-06-04T12:37:22 ICT" name="testIsPrimeNumber3" finished-at="2024-06-04T12:37:22 ICT" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimeNumber3 -->
        <test-method signature="testIsPrimeNumber4()" started-at="2024-06-04T12:37:22 ICT" name="testIsPrimeNumber4" finished-at="2024-06-04T12:37:22 ICT" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimeNumber4 -->
        <test-method signature="testIsPrimeNumber5()" started-at="2024-06-04T12:37:22 ICT" name="testIsPrimeNumber5" finished-at="2024-06-04T12:37:22 ICT" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimeNumber5 -->
      </class> <!-- com.example.TestDemo -->
      <class name="com.example.AppTest">
        <test-method signature="shouldAnswerWithTrue()" started-at="2024-06-04T12:37:22 ICT" name="shouldAnswerWithTrue" finished-at="2024-06-04T12:37:22 ICT" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAnswerWithTrue -->
      </class> <!-- com.example.AppTest -->
      <class name="com.example.TestPasswordValidator">
        <test-method signature="testIsPasswordTooLong() throws java.lang.Exception" started-at="2024-06-04T12:37:22 ICT" name="testIsPasswordTooLong" finished-at="2024-06-04T12:37:22 ICT" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPasswordTooLong -->
        <test-method signature="testIsPasswordNotStrong() throws java.lang.Exception" started-at="2024-06-04T12:37:22 ICT" name="testIsPasswordNotStrong" finished-at="2024-06-04T12:37:22 ICT" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPasswordNotStrong -->
        <test-method signature="testIsPasswordStrong() throws java.lang.Exception" started-at="2024-06-04T12:37:22 ICT" name="testIsPasswordStrong" finished-at="2024-06-04T12:37:22 ICT" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPasswordStrong -->
      </class> <!-- com.example.TestPasswordValidator -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
